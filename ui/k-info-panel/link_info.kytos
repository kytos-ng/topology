<template>
    <k-accordion>
      <div class="buttons">
        <div class="button-left">
          <k-button @click="bt_state_toggle" :title="next_state"></k-button>
        </div>
        <div class="button-right">
          <k-button @click="bt_delete" title="Delete"></k-button>
        </div>
      </div>
      <k-modal
        :message="modal_message"
        button-title="Delete"
        :action="delete_link"
        v-model:show-modal="show_modal">
      </k-modal>
      <k-modal
        :message="modal_toggle_message"
        :button-title="next_state"
        :action="state_toggle"
        v-model:show-modal="show_toggle_modal">
      </k-modal>
      <k-accordion-item :defaultState="false" title="Basic Details">
        <k-property-panel>
          <template v-if="content" >
            <k-property-panel-item :name="key" :value="value" 
            :key="key" v-for="(value, key) in this.details">
            </k-property-panel-item>
          </template>
        </k-property-panel>
      </k-accordion-item>
      <k-accordion-item :defaultState="false" title="Metadata" v-if="Object.keys(this.metadata).length > 0">
        <div class="metadata_table">
          <table>
            <thead>
              <tr>
                <th>Key</th>
                <th>Value</th>  
              </tr>
            </thead>
            <tbody>
              <tr v-for="(value, key) in this.metadata">
                <td >{{key}}</td>
                <td >{{value}}</td>
              </tr>
            </tbody>
          </table>
        </div>
      </k-accordion-item>
      <k-accordion-item :defaultState="false" title="Metadata actions">
        <k-textarea title="Insert metadata" icon="arrow-right" placeholder='Eg. {"bandwidth": 100, "link_name": "some_name"}' v-model:value="to_add"></k-textarea>
        <div class="metadata_container">
          <k-button title="Add metadata" @click="bt_add_metadata"></k-button>
        </div>
        <k-input title="Insert metadata" icon="arrow-right" placeholder="Eg. link_name" v-model:value="to_delete"></k-input>
        <div class="metadata_container">
          <k-button title="Remove metadata" @click="bt_rmv_metadata"></k-button>
        </div>
      </k-accordion-item>
    </k-accordion>
</template>

<script>
module.exports = {
   props: ["content"],
   methods: {
   },
   data () {
     return {
         to_add: '',
         to_delete: '',
         metadata: [],
         next_state: '',
         details: {'enabled': '',
                   'active': '',
                   'id': '',
                   'endpoint_a': '',
                   'node_name_a': '',
                   'endpoint_b': '',
                   'node_name_b': '',
                   'status': '',
                   'status_reason': '',
                   },
         show_modal: false,
         show_toggle_modal: false,
     }
   },
   methods: {
     get_details: function(){
       if(this.content === undefined) return
       var self = this
       Object.keys(this.details).forEach(function (key) {
         let value = self.content[key]
         if (key.includes('node_name')) {
             return;
         }
         else if (key != 'endpoint_a' && key != 'endpoint_b') {
             self.details[key] = String(value)
         }
         else {
             self.details[key] = String(value['id'])
         }
       });
       this.get_metadata()
       this.get_enabled_value()
     },
     get_metadata: function(){
       if(this.content === undefined) return
       this.metadata = this.content.metadata
     },
     get_enabled_value() {
       this.next_state = this.details.enabled == 'true'? 'Disable' : 'Enable'
     },
     msg_state_success(data){
       let name = this.metadata.link_name !== undefined && this.metadata.link_name.length !== 0? '"' + this.metadata.link_name + '"' : this.details.id
       let notification = {
         title: 'Link ' + this.next_state + 'd: Succeed',
         description: 'The link ' + name + ' was ' + this.next_state.toLowerCase() + 'd.',
         icon: 'gear',
       }
       this.next_state = this.next_state == 'Enable'? 'Disable' : 'Enable'
       this.content['enabled'] = this.next_state == 'Enable'? 'false' : 'true'
       this.details['enabled'] = this.content['enabled']
       this.$kytos.eventBus.$emit("setNotification", notification)
     },
     msg_state_failure(data){
       let name = this.metadata.link_name !== undefined && this.metadata.link_name.length !== 0? '"' + this.metadata.link_name + '"' : this.details.id
       let notification = {
         title: 'Link ' + this.next_state + 'd: Failed',
         description: data.status + ': ' + data.responseJSON.description + ' The link ' + name + ' was not ' + this.next_state.toLowerCase() + 'd.',
         icon: 'gear',
       }
       this.$kytos.eventBus.$emit("setNotification", notification)
     },
     bt_state_toggle(){
       this.show_toggle_modal = true;
     },
     state_toggle(){
       let request = $.ajax({
                        type:"POST",
                        url: this.$kytos_server_api + "kytos/topology/v3/links/" + this.details.id
                              + "/" + this.next_state.toLowerCase(),
                        async: true,});       
       request.done(this.msg_state_success)
       request.fail(this.msg_state_failure)
     },
     bt_add_metadata() {
       let name = this.metadata.link_name !== undefined && this.metadata.link_name.length !== 0? '"' + this.metadata.link_name + '"' : this.details.id
       var _this = this
       let request = $.ajax({
                        type: "POST",
                        url: this.$kytos_server_api + "kytos/topology/v3/links/" + this.details.id
                              + "/metadata",
                        async: true,
                        data: this.to_add,
                        dataType: "json",
                        contentType: "application/json; charset=utf-8",
       });
       request.done(function() {
         let notification = {
              icon: 'gear',
              title: 'Add metadata: Success',
              description: '"' + _this.to_add + '" was added to the metadata. Link: ' + name,
         }
         _this.$kytos.eventBus.$emit("setNotification", notification)
         let temp = JSON.parse(_this.to_add)
         for (key in temp){
           _this.metadata[key] = temp[key]
           _this.content.metadata[key] = temp[key]
         }
         _this.to_add = ''
       });
       request.fail(function(data) {
         let notification = {
              icon: 'gear',
              title: 'Add metadata: Failure',
              description: data.status + ': ' + data.responseJSON.description + ' "' + _this.to_add + '" was not added to the metadata. Link: ' + name,
         }
         _this.$kytos.eventBus.$emit("setNotification", notification)
       });
     },
     bt_rmv_metadata() {
       let name = this.metadata.link_name !== undefined && this.metadata.link_name.length !== 0? '"' + this.metadata.link_name + '"' : this.details.id
       var _this = this
       let request = $.ajax({
                        type: "DELETE",
                        url: this.$kytos_server_api + "kytos/topology/v3/links/" + this.details.id
                              + "/metadata/" + this.to_delete,
                        async: true,
       });
       request.done(function() {
         let notification = {
              icon: 'gear',
              title: 'Delete metadata: Success',
              description: '"' + _this.to_delete + '" was deleted from the metadata. Link: ' + name,
         }
         _this.$kytos.eventBus.$emit("setNotification", notification)
         delete _this.metadata[_this.to_delete]
         delete _this.content.metadata[_this.to_delete]
         _this.to_delete = ''
       });
       request.fail(function(data) {
         let notification = {
              icon: 'gear',
              title: 'Delete metadata: Failure',
              description: data.status + ': ' + data.responseJSON.description + ' "' + _this.to_delete + '" was not deleted from the metadata. Link: ' + name,
         }
         _this.$kytos.eventBus.$emit("setNotification", notification)
       });
     },
     bt_delete(){
      this.show_modal = true;
     },
     delete_link(){
      let name = this.metadata.link_name !== undefined && this.metadata.link_name.length !== 0? '"' + this.metadata.link_name + '"' : this.details.id
      var _this = this
      let request = $.ajax({
                       type: "DELETE",
                       url: this.$kytos_server_api + "kytos/topology/v3/links/" + this.details.id,
                       async: true,
       });
       request.done(function() {
         let notification = {
              icon: 'gear',
              title: 'Delete link: Success',
              description: 'The link ' + name + ' was deleted.',
         }
         _this.$kytos.eventBus.$emit("setNotification", notification)
         _this.$kytos.eventBus.$emit("hideInfoPanel")
       });
       request.fail(function(data) {
         let notification = {
              icon: 'gear',
              title: 'Delete link: Failure',
              description: data.status + ': ' + data.responseJSON.description + ' The link ' + name + ' was not deleted.',
         }
         _this.$kytos.eventBus.$emit("setNotification", notification)
       });
     },
     get_node_name: function(switch_id, field_name) {
       return this.$http.get(this.$kytos_server_api + "kytos/topology/v3/switches/" + switch_id + "/metadata")
          .then(response => {
            if ('node_name' in response.data.metadata) {
              this.details[field_name] = response.data.metadata.node_name
            }
          })
          .catch(error => {
            let notification = {
                 icon: 'gear',
                 title: 'Getting switch metadata: Failure',
                 description: (error.status + ': ' + error.response.data.description + 
                               '. The switch ' + switch_id + ' metadata could not be retrieved.'),
            }
            this.$kytos.eventBus.$emit("setNotification", notification)
          })
     },
   },
   computed: {
       modal_message() {
          return `Delete Link ${this.metadata.link_name !== undefined && this.metadata.link_name.length !== 0 ? '"' + this.metadata.link_name + '"' : this.details.id}?`
       },
       modal_toggle_message() {
          return `${this.next_state} Link ${this.metadata.link_name !== undefined && this.metadata.link_name.length !== 0 ? '"' + this.metadata.link_name + '"' : this.details.id}?`
       },
   },
   mounted () {
      if(this.content === undefined) return
      let _this = this
      _this.get_details()
      let endpoint_a = this.content.endpoint_a['switch']
      let endpoint_b = this.content.endpoint_b['switch']
      Promise.all([_this.get_node_name(endpoint_a, "node_name_a"),
                   _this.get_node_name(endpoint_b, "node_name_b")])
                 .then()
   },
   watch:{
       content: {
        handler: function () {
          if (this.content){
            this.get_details()
          }
        },
        deep: true
       }
   }
 }
</script>

<style>
.metadata_table {
  color: #ccc;
  text-align: center;
  margin: 0 auto;
  display: block;
  padding: 0.5em 0 1em 0.3em;
  font-size: 0.9em;
  overflow-x: auto;
}
.metadata_table table{
  display: table;
  width: 100%;
}
.metadata_table thead{
  font-weight: bold;
  background: #554077;
}
.metadata_table th{
  padding: 0.6em 0 0.6em 0;
}
.metadata_table td{
  vertical-align: middle;
  padding: 0.6em 0 0.6em 0;
}
.metadata_table tbody tr:nth-child(even) {
  background: #313131;
}
.metadata_table tbody tr:hover {
    color: #eee;
    background-color: #666;
}
.metadata_container {
  width: 100%;
  display: flex;
  justify-content: center;
}
.metadata_container .k-button{
  width: 150px;
}
.buttons .button-right button{
  float: right;
  background: darkred;
}
.buttons .button-left{
  float: left;
}
</style>